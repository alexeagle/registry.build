[{"name":"autodetect_server_javabase","type":"boolean","default":"true","description":"When --noautodetect_server_javabase is passed, Bazel does not fall back to the local JDK for running the bazel server and instead exits.","tags":["affects_outputs","loses_incremental_state"]},{"name":"batch","type":"boolean","default":"false","description":"If set, Bazel will be run as just a client process without a server, instead of in the standard client/server mode. This is deprecated and will be removed, please prefer shutting down the server explicitly if you wish to avoid lingering servers.","tags":["loses_incremental_state","bazel_internal_configuration","deprecated"]},{"name":"batch_cpu_scheduling","type":"boolean","default":"false","description":"Only on Linux; use 'batch' CPU scheduling for Blaze. This policy is useful for workloads that are non-interactive, but do not want to lower their nice value. See 'man 2 sched_setscheduler'. If false, then Bazel does not perform a system call.","tags":["host_machine_resource_optimizations"]},{"name":"bazelrc","type":"string","default":"see description","description":"The location of the user .bazelrc file containing default values of Bazel options. /dev/null indicates that all further `--bazelrc`s will be ignored, which is useful to disable the search for a user rc file, e.g. in release builds.This option can also be specified multiple times.E.g. with `--bazelrc=x.rc --bazelrc=y.rc --bazelrc=/dev/null --bazelrc=z.rc`,","tags":["1) x.rc and y.rc are read.\n      2) z.rc is ignored due to the prior /dev/null."]},{"name":"block_for_lock","type":"boolean","default":"true","description":"When --noblock_for_lock is passed, Bazel does not wait for a running command to complete, but instead exits immediately.","tags":["eagerness_to_exit"]},{"name":"client_debug","type":"boolean","default":"false","description":"If true, log debug information from the client to stderr. Changing this option will not cause the server to restart.","tags":["affects_outputs","bazel_monitoring"]},{"name":"connect_timeout_secs","type":"integer","default":"30","description":"The amount of time the client waits for each attempt to connect to the server","tags":["bazel_internal_configuration"]},{"name":"expand_configs_in_place","type":"boolean","default":"true","description":"Changed the expansion of --config flags to be done in-place, as opposed to in a fixed point expansion between normal rc options and command-line specified options.","tags":["no_op","deprecated"]},{"name":"failure_detail_out","type":"path","default":"see description","description":"If set, specifies a location to write a failure_detail protobuf message if the server experiences a failure and cannot report it via gRPC, as normal. Otherwise, the location will be ${OUTPUT_BASE}/failure_detail.rawproto.","tags":["affects_outputs","loses_incremental_state"]},{"name":"home_rc","type":"boolean","default":"true","description":"Whether or not to look for the home bazelrc file at $HOME/.bazelrc","tags":["changes_inputs"]},{"name":"idle_server_tasks","type":"boolean","default":"true","description":"Run System.gc() when the server is idle","tags":["loses_incremental_state","host_machine_resource_optimizations"]},{"name":"ignore_all_rc_files","type":"boolean","default":"false","description":"Disables all rc files, regardless of the values of other rc-modifying flags, even if these flags come later in the list of startup options.","tags":["changes_inputs"]},{"name":"io_nice_level","type":"integer","default":"-1","description":"Only on Linux; set a level from 0-7 for best-effort IO scheduling using the sys_ioprio_set system call. 0 is highest priority, 7 is lowest. The anticipatory scheduler may only honor up to priority 4. If set to a negative value, then Bazel does not perform a system call.","tags":["host_machine_resource_optimizations"]},{"name":"local_startup_timeout_secs","type":"integer","default":"120","description":"The maximum amount of time the client waits to connect to the server","tags":["bazel_internal_configuration"]},{"name":"macos_qos_class","type":"string","default":"default","description":"Sets the QoS service class of the bazel server when running on macOS. This flag has no effect on all other platforms but is supported to ensure rc files can be shared among them without changes. Possible values are: user-interactive, user-initiated, default, utility, and background.","tags":["host_machine_resource_optimizations"]},{"name":"max_idle_secs","type":"integer","default":"10800","description":"The number of seconds the build server will wait idling before shutting down. Zero means that the server will never shutdown. This is only read on server-startup, changing this option will not cause the server to restart.","tags":["eagerness_to_exit","loses_incremental_state"]},{"name":"output_base","type":"path","default":"see description","description":"If set, specifies the output location to which all build output will be written. Otherwise, the location will be ${OUTPUT_ROOT}/_blaze_${USER}/${MD5_OF_WORKSPACE_ROOT}. Note: If you specify a different option from one to the next Bazel invocation for this value, you'll likely start up a new, additional Bazel server. Bazel starts exactly one server per specified output base. Typically there is one output base per workspace - however, with this option you may have multiple output bases per workspace and thereby run multiple builds for the same client on the same machine concurrently. See 'bazel help shutdown' on how to shutdown a Bazel server.","tags":["affects_outputs","loses_incremental_state"]},{"name":"output_user_root","type":"path","default":"see description","description":"The user-specific directory beneath which all build outputs are written; by default, this is a function of $USER, but by specifying a constant, build outputs can be shared between collaborating users.","tags":["affects_outputs","loses_incremental_state"]},{"name":"preemptible","type":"boolean","default":"false","description":"If true, the command can be preempted if another command is started.","tags":["eagerness_to_exit"]},{"name":"server_jvm_out","type":"path","default":"see description","description":"The location to write the server's JVM's output. If unset then defaults to a location in output_base.","tags":["affects_outputs","loses_incremental_state"]},{"name":"shutdown_on_low_sys_mem","type":"boolean","default":"false","description":"If max_idle_secs is set and the build server has been idle for a while, shut down the server when the system is low on free RAM. Linux only.","tags":["eagerness_to_exit","loses_incremental_state"]},{"name":"system_rc","type":"boolean","default":"true","description":"Whether or not to look for the system-wide bazelrc.","tags":["changes_inputs"]},{"name":"unlimit_coredumps","type":"boolean","default":"false","description":"Raises the soft coredump limit to the hard limit to make coredumps of the server (including the JVM) and the client possible under common conditions. Stick this flag in your bazelrc once and forget about it so that you get coredumps when you actually encounter a condition that triggers them.","tags":["bazel_internal_configuration"]},{"name":"watchfs","type":"boolean","default":"false","description":"If true, bazel tries to use the operating system's file watch service for local changes instead of scanning every file for a change.","tags":["deprecated"]},{"name":"windows_enable_symlinks","type":"boolean","default":"false","description":"If true, real symbolic links will be created on Windows instead of file copying. Requires Windows developer mode to be enabled and Windows 10 version 1703 or greater.","tags":["bazel_internal_configuration"]},{"name":"workspace_rc","type":"boolean","default":"true","description":"Whether or not to look for the workspace bazelrc file at $workspace/.bazelrc","tags":["changes_inputs"]},{"name":"host_jvm_args","type":"string","default":"may be used multiple times","description":"Flags to pass to the JVM executing Blaze.","tags":[""]},{"name":"host_jvm_profile","type":"string","default":"","description":"Convenience option to add some profiler/debugger-specific JVM startup flags. Bazel has a list of known values that it maps to hard-coded JVM startup flags, possibly searching some hardcoded paths for certain files.","tags":[""]},{"name":"server_javabase","type":"string","default":"","description":"Path to the JVM used to execute Bazel itself.","tags":[""]}]