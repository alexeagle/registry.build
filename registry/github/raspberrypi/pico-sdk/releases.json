[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/107707260","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/107707260/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/107707260/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.5.1","id":107707260,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"RE_kwDOE8B3884Ga3t8","tag_name":"1.5.1","target_commitish":"master","name":"SDK 1.5.1","draft":false,"prerelease":false,"created_at":"2023-06-13T22:27:33Z","published_at":"2023-06-14T02:39:53Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/112935743","id":112935743,"node_id":"RA_kwDOE8B3884Gu0M_","name":"sdk-1.5.1-html-doc.zip","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"content_type":"application/zip","state":"uploaded","size":11042324,"download_count":2438,"created_at":"2023-06-15T17:55:29Z","updated_at":"2023-06-15T17:55:37Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/1.5.1/sdk-1.5.1-html-doc.zip"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.5.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.5.1","body":"This release is largely a bug fix release, however it also makes Bluetooth support official and adds some new libraries and functionality.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.5.1+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A1.5.1+is%3Aclosed).\r\n\r\n### Board Support\r\n\r\nThe following board has been added and may be specified via `PICO_BOARD`:\r\n\r\n- `pololu_3pi_2040_robot`\r\n\r\nThe following board configurations have been modified:\r\n\r\n- `adafruit_itsybitsy_rp2040` - corrected the mismatched `PICO_DEFAULT_I2C` bus number (favors the breadboard pins not the stemma connector).\r\n- `sparkfun_thingplus` - added WS2812 pin config. \r\n\r\n### Library Changes/Improvements\r\n\r\n#### hardware_dma\r\n\r\n* Added `dma_channel_cleanup()` function that can be used to clean up a dynamically claimed DMA channel after use, such that it won't be in a surprising state for the next user, making sure that any in-flight transfer is aborted, and no interrupts are left pending.\r\n\r\n#### hardware_spi\r\n\r\n* The `spi_set_format`, `spi_set_slave`, `spi_set_baudrate` functions that modify the configuration of an SPI instance, now disable the SPI while changing the configuration as specified in the data sheet.\r\n\r\n#### pico_async_context\r\n\r\n* Added `user_data` member to `async_when_pending_worker_t` to match `async_at_time_worker_t`.\r\n\r\n#### pico_cyw43_arch\r\n\r\n* Added `cyw43_arch_disable_sta_mode()` function to complement `cyw43_arch_enable_sta_mode()`.\r\n* Added `cyw43_arch_disable_ap_mode()` function to complement `cyw43_arch_enable_ap_mode()`.\r\n\r\n#### pico_stdio_usb\r\n\r\n* The 20-character limit for descriptor strings `USBD_PRODUCT` and `USBD_MANUFACTURER` can now be extended by defining \r\n  `USBD_DESC_STR_MAX`.\r\n* `PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS` is now supported in the build as well as compiler definitions; if it is set in the build, it is added to the compile definitions.\r\n\r\n#### pico_rand\r\n\r\n- Fixed poor randomness when `PICO_RAND_ENTROPY_SRC_BUS_PERF_COUNTER=1`.\r\n\r\n#### PLL and Clocks\r\n\r\n- The `set_sys_clock_pll` and `set_sys_clock_khz` methods now reference a pre-processor define `PICO_CLOCK_AJDUST_PERI_CLOCK_WITH_SYS_CLOCK`. If set to `1`, the peripheral clock is updated to match the new system clock, otherwise the preexisting behavior (of setting the peripheral clock to a safe 48Mhz) is preserved.\r\n- Support for non-standard crystal frequencies, and compile-time custom clock configurations:\r\n  - The new define `XOSC_KHZ` is used in preference to the preexisting `XOSC_MHZ` to define the crystal oscillator frequency. This value is now also correctly plumbed through the various clock setup functions, such that they behave correctly with a crystal frequency other than 12Mhz. `XOSC_MHZ` will be automatically defined for backwards compatibility if `XOSC_KHZ` is an exact multiple of 1000 Khz. Note that either `XOSC_MHZ` or `XOSC_KHZ` may be specified by the user, but not both.\r\n  - The new define `PLL_COMMON_REFDIV` can be specified to override the default reference divider of 1.\r\n  - The new defines `PLL_SYS_VCO_FREQ_KHZ`, `PLL_SYS_POSTDIV1` and `PLL_SYS_POSTDIV2` are used to configure the system clock PLL during runtime initialization. These are defaulted for you if `SYS_CLK_KHZ=125000`, `XOSC_KHZ=12000` and `PLL_COMMON_REFDIV=1`. You can modify these values in your `CMakeLists.txt` if you want to configure a different system clock during runtime initialization, or are using a non-standard crystal.  \r\n  - The new defines `PLL_USB_VCO_FREQ_KHZ`, `PLL_USB_POSTDIV1` and `PLL_USB_POSTDIV2` are used to configure the USB clock PLL during runtime initialization. These are defaulted for you if `USB_CLK_KHZ=48000`, `XOSC_KHZ=12000` and `PLL_COMMON_REFDIV=1`. You can modify these values in your `CMakeLists.txt` if you want to configure a different USB clock if you are using a non-standard crystal.\r\n  - The new define `PICO_PLL_VCO_MIN_FREQ_KHZ` is used in preference to the pre-existing `PICO_PLL_VCO_MIN_FREQ_MHZ`, though specifying either is supported.\r\n  - The new define `PICO_PLL_VCO_MAX_FREQ_KHZ` is used in preference to the pre-existing `PICO_PLL_VCO_MAX_FREQ_MHZ`, though specifying either is supported.\r\n\r\n### New Libraries\r\n\r\n#### pico_flash\r\n\r\n* This is a new higher level library than `hardware_flash`. It provides helper functions to facilitate getting into a \r\n  state where it is safe to write to flash (the default implementation disables interrupts on the current core, and if \r\n  necessary, makes sure the other core is running from RAM, and has interrupts disabled).\r\n* Adds a `flash_safe_execute()` function to execute a callback function while in the \"safe\" state.\r\n* Adds a `flash_safe_execute_core_init()` function which must be called from the \"other core\" when using `pico_multicore` to enable the cooperative support for entering a \"safe\" state.  \r\n* Supports user override of the mechanism by overriding the `get_flash_safety_helper()` function.\r\n\r\n### Miscellaneous\r\n\r\n* All assembly (including inline) in the SDK now uses the `unified` syntax.\r\n  * New C macros `pico_default_asm( ... )` and `pico_default_asm_volatile( ... )` are provided that are equivalent to `__asm` and `__asm volatile` blocks, but with a `.syntax unified` at the beginning. \r\n* A new assembler macro `pico_default_asm_setup` is provided to configure the correct CPU and dialect.\r\n* Some code cleanup to make the SDK code at least compile cleanly on Clang and IAR.\r\n\r\n### Build\r\n\r\n* `PICO_BOARD` and `PICO_BOARD_HEADER_DIRS` now correctly use the latest environment variable value if present.\r\n* A CMake performance regression due to repeated calls to `find_package` has been fixed.\r\n* Experimental support is provided for compiling with Clang. As an example, you can build with the\r\n  [LLVM Embedded Toolchain for Arm](https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm), noting however that currently only version 14.0.0 works, as later versions use `picolib` rather than `newlib`.\r\n   * Note that if you are using TinyUSB you need to use the latest master to compile with Clang.\r\n   \r\n   ```\r\n  mkdir clang_build\r\n  cd clang_build\r\n  cmake -DPICO_COMPILER=pico_arm_clang -DPICO_TOOLCHAIN_PATH=/path/to/arm-embedded-llvm-14.0.0 ..\r\n  make\r\n  ```\r\n  \r\n### Bluetooth Support for Pico W\r\n\r\nThe support is now official. Please find examples in [pico-examples](https://github.com/raspberrypi/pico-examples#pico-w-bluetooth).\r\n\r\n* The Bluetooth API is provided by [BTstack](https://github.com/bluekitchen/btstack).\r\n* The following libraries are provided that expose core BTstack functionality:\r\n    * `pico_btstack_ble` - Adds Bluetooth Low Energy (LE) support.\r\n    * `pico_btstack_classic` - Adds Bluetooth Classic support.\r\n    * `pico_btstack_sbc_encoder` - Adds Bluetooth Sub Band Coding (SBC) encoder support.\r\n    * `pico_btstack_sbc_decoder` - Adds Bluetooth Sub Band Coding (SBC) decoder support.\r\n    * `pico_btstack_bnep_lwip` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP.\r\n    * `pico_btstack_bnep_lwip_sys_freertos` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP with FreeRTOS for `NO_SYS=0`.\r\n* The following integration libraries are also provided:\r\n    * `pico_btstack_run_loop_async_context` - provides a common `async_context` backed implementation of a BTstack *\"run loop\"* that can be used for all BTstack use with the `pico-sdk`.\r\n    * `pico_btstack_flash_bank` - provides a sample implementation for storing required Bluetooth state in flash.\r\n    * `pico_btstack_cyw43` - integrates BTstack with the CYW43 driver.\r\n* The `CMake` function `pico_btstack_make_gatt_header` can be used to run the BTstack `compile_gatt` tool to make a GATT header file from a BTstack `GATT` file.\r\n* `pico_cyw43_driver` and `cyw43_driver` now support HCI communication for Bluetooth.\r\n* `cyw43_driver_picow` now supports Pico W specific HCI communication for Bluetooth over SPI.\r\n* `cyw43_arch_init()` and `cyw43_arch_deinit()` automatically handle Bluetooth support if `CYW43_ENABLE_BLUETOOTH` is `1`  (as it will be automatically if you depend on `pico_btstack_cyw43`).\r\n\r\nKey changes since 1.5.0:\r\n\r\n* Added Raspberry Pi specific [BTstack license](https://github.com/raspberrypi/pico-sdk/blob/master/src/rp2_common/pico_btstack/LICENSE.RP).\r\n* The storage offset in flash for `pico_btstack_flash_bank` can be specified at runtime by defining `pico_flash_bank_get_storage_offset_func` to your own function to return the offset within flash.\r\n* `pico_btstack_flash_bank` is now safe for multicore / FreeRTOS SMP use, as it uses the new `pico_flash` library to make sure the other core is not accessing flash during flash updates. If you are using `pico_multicore`you must have called `flash_safe_execute_core_init` from the \"other\" core (to the one Bluetooth is running on).\r\n* Automatically set Bluetooth MAC address to the correct MAC address (Wi-Fi MAC address + 1), as some devices do not have it set in OTP and were using the same default MAC from the Bluetooth chip causing collisions.\r\n* Various bug-fixes and stability improvements (especially with concurrent Wi-Fi), including updating `cyw43_driver` and `btstack` to the newest versions.\r\n\r\n### Authors\r\n\r\nThanks to the following for their contributions:\r\n\r\n2bndy5,\r\nagento2,\r\nAndrew Burge,\r\nAndrew Scheller,\r\narjunak234,\r\nDavid Thacher,\r\ndjazz,\r\nGraham Sanderson,\r\nhubiscode,\r\nJames Hughes,\r\nLuke Wren,\r\nMalte Thiesen,\r\nMichael Busby,\r\nMr. Green's Workshop,\r\nPaul Grayson,\r\nPeter Harper\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/107707260/reactions","total_count":28,"+1":9,"-1":0,"laugh":1,"hooray":12,"confused":0,"heart":6,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/86360118","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/86360118/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/86360118/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.5.0","id":86360118,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"RE_kwDOE8B3884FJcA2","tag_name":"1.5.0","target_commitish":"master","name":"SDK 1.5.0","draft":false,"prerelease":false,"created_at":"2023-02-11T00:27:36Z","published_at":"2023-02-11T00:49:39Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/95368340","id":95368340,"node_id":"RA_kwDOE8B3884FrzSU","name":"sdk1.5.0-with-submodules.zip","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"content_type":"application/zip","state":"uploaded","size":69274724,"download_count":2384,"created_at":"2023-02-12T20:52:34Z","updated_at":"2023-02-12T20:53:15Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/1.5.0/sdk1.5.0-with-submodules.zip"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.5.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.5.0","body":"This release contains new libraries and functionality, along with numerous bug fixes and documentation improvements.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.5.0+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A1.5.0+is%3Aclosed).\r\n\r\nNote, these release notes are long and may appear truncated in the \"Releases\" tab; you can see the full version [here](https://github.com/raspberrypi/pico-sdk/releases/tag/1.5.0).\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `nullbits_bit_c_pro`\r\n- `waveshare_rp2040_lcd_1.28`\r\n- `waveshare_rp2040_one`\r\n\r\n### Library Changes/Improvements\r\n\r\n#### hardware_clocks\r\n* `clock_gpio_init()` now takes a `float` for the clock divider value, rather than an `int`.\r\n* Added `clock_gpio_init_int_frac()` function to allow initialization of integer and fractional part of the clock divider value, without using `float`.\r\n* Added `--ref-min` option to `vcocalc.py` to override the minimum reference frequency allowed.\r\n* `vcocalc.py` now additionally considers reference frequency dividers greater than 1.\r\n\r\n#### hardware_divider\r\n* Improved the performance of `hw_divider_` functions.\r\n\r\n#### hardware_dma\r\n* Added `dma_sniffer_set_output_invert_enabled()` and `dma_sniffer_set_output_reverse_enabled()` functions to configure the DMA sniffer.\r\n* Added `dma_sniffer_set_data_accumulator()` and `dma_sniffer_get_data_accumulator()` functions to access the DMA sniffer accumulator.\r\n\r\n#### hardware_i2c\r\n* Added `i2c_get_instance()` function for consistency with other `hardware_` libraries. \r\n* Added `i2c_read_byte_raw()`, `i2c_write_byte_raw()` functions to directly read and write the I2C data register for an I2C instance.\r\n\r\n#### hardware_timer\r\n\r\n* Added `hardware_alarm_claim_unused()` function to claim an unused hardware timer.\r\n\r\n#### pico_cyw43_arch\r\n\r\n* Added `cyw43_arch_wifi_connect_bssid_` variants of `cyw43_arch_wifi_connect_` functions to allow connection to a specific access point.\r\n* Blocking `cyw43_arch_wifi_connect_` functions now continue trying to connect rather than failing immediately if the network is not found.\r\n* `cyw43_arch_wifi_connect_` functions now return consistent return codes (`PICO_OK`, or `PICO_ERROR_XXX`).\r\n* The `pico_cyw43_arch` library has been completely rewritten on top of the new `pico_async_context` library that generically abstracts the different types of asynchronous operation (`poll`, `threadsafe_background` and `freertos`) previously handled in a bespoke fashion by `pico_cyw43_arch`. Many edge case bugs have been fixed as a result of this. Note that this change should be entirely backwards compatible from the user point of view.\r\n* `cyw43_arch_init()` and `cyw43_arch_deinit()` functions are now very thin layers which handle `async_context` life-cycles, along with adding support for the `cyw43_driver`, lwIP, BTstack etc. to that `async_context`. Currently, these mechanisms remain the preferred documented way to initialize Pico W networking, however you are free to do similar initialization/de-initialization yourself.\r\n* Added `cyw43_arch_set_async_context()` function to specify a custom `async_context` prior to calling `cyw43_arch_init*()`\r\n* Added `cyw43_arch_async_context()` function to get the `async_context` used by the CYW43 architecture support.\r\n* Added `cyw43_arch_init_default_async_context()` function to return the `async_context` that `cyw43_arch_init*()` would initialize if one has not been set by the user.\r\n* Added `cyw43_arch_wait_for_work_until()` function to block until there is networking work to be done. This is most useful for `poll` style applications that have no other work to do and wish to sleep until `cyw43_arch_poll()` needs to be called again.\r\n\r\n#### pico_cyw43_driver\r\n\r\n- The functionality has been clarified into 3 separate libraries:\r\n  - `cyw43_driver` - the raw cyw43_driver code.\r\n  - `cyw43_driver_picow` - additional support for communication with the Wi-Fi chip over SPI on Pico W.\r\n  - `pico_cyw43_driver` - integration of the cyw43_driver with the `pico-sdk` via `async_context`\r\n- Added `CYW43_WIFI_NVRAM_INCLUDE_FILE` define to allow user to override the NVRAM file.\r\n\r\n#### pico_divider\r\n\r\n* Improved the performance of 64-bit divider functions.\r\n\r\n#### pico_platform\r\n\r\n* Add `panic_compact()` function that discards the message to save space in non-debug (`NEBUG` defined) builds.\r\n\r\n#### pico_runtime\r\n\r\n* Added proper implementation of certain missing `newlib` system APIs: `_gettimeofday()`, `_times()`, `_isatty()`, `_getpid()`.\r\n* The above changes enable certain additional C/C++ library functionality such as `gettimeofday()`, `times()` and `std::chrono`.\r\n* Added `settimeofday()` implementation such that `gettimeofday()` can be meaningfully used.\r\n* Added default (return `-1`) implementations of the remaining `newlib` system APIs: `_open()`, `_close()`, `_lseek()`, `_fstat()`, `_isatty()`, `_kill()`, to prevent warnings on GCC 12.\r\n* Made all `newlib` system API implementations *weak* so the user can override them.\r\n\r\n#### pico_stdio\r\n\r\n* `pico_stdio` allows for outputting from within an IRQ handler that creates the potential for deadlocks (especially with `pico_stdio_usb`), and the intention is to *not* deadlock but instead discard output in any cases where a deadlock would otherwise occur. The code has been revamped to avoid more deadlock cases, and a new define `PICO_STDIO_DEADLOCK_TIMEOUT_MS` has been added to catch remaining cases that might be caused by user level locking.\r\n* Added `stdio_set_chars_available_callback()` function to set a callback to be called when input is available. See also the new `PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK` and `PICO_STDIO_UART_SUPPORT_CHARS_AVAILABLE_CALLBACK` defines which both default to `1` and control the availability of this new feature for USB and UART stdio respectively (at the cost of a little more code).\r\n* Improved performance of `stdio_semihosting`.\r\n* Give the user more control over the USB descriptors of `stdio_usb` via `USBD_VID`, `USBD_PID`, `USBD_PRODUCT`, `PICO_STDIO_USB_CONNECTION_WITHOUT_DTR` and `PICO_STDIO_USB_DEVICE_SELF_POWERED`\r\n\r\n#### pico_sync\r\n\r\n* Added `critical_section_is_initialized()` function to test if a critical section has been initialized.\r\n* Added `mutex_try_enter_block_until()` function to wait only up to a certain time to acquire a mutex.\r\n\r\n#### pico_time\r\n* Added `from_us_since_boot()` function to convert a `uint64_t` timestamp to an `absolute_time_t`.\r\n* Added `absolute_time_min()` function to return the earlier of two `absolute_time_t` values.\r\n* Added `alarm_pool_create_with_unused_hardware_alarm()` function to create an alarm pool using a hardware alarm number claimed using `hardware_alarm_claim()`.\r\n* Added `alarm_pool_core_num()` function to determine what core an alarm pool runs on.\r\n* Added `alarm_pool_add_alarm_at_force_in_context()` function to add an alarm, and have it always run in the IRQ context even if the target time is in the past, or during the call. This may be simpler in some cases than dealing with the `fire_if_past` parameters to existing functions, and avoids some callbacks happening from non IRQ context.\r\n\r\n#### pico_lwip\r\n- Added `pico_lwip_mqtt` library to expose the MQTT app functionality in lwIP.\r\n- Added `pico_lwip_mdns` library to expose the MDNS app functionality in lwIP.\r\n- Added `pico_lwip_freertos` library for `NO_SYS=0` with FreeRTOS as a complement to `pico_lwip_nosys` for `NO_SYS=1`.\r\n\r\n#### TinyUSB\r\n\r\n* TinyUSB has upgraded from 0.12.0 to 0.15.0. See TinyUSB release notes [here](https://github.com/hathach/tinyusb/releases) for details. \r\n* Particularly *host* support should be massively improved.\r\n* Defaulted new TinyUSB `dcd_rp2040` driver's `TUD_OPT_RP2040_USB_DEVICE_UFRAME_FIX` variable to `1` as a workaround for errata RP2040-E15. This fix is required for correctness, but comes at the cost of some performance, so applications that won't ever be plugged into a Pi 4 or Pi 400 can optionally disable this by setting the value of `TUD_OPT_RP2040_USB_DEVICE_UFRAME_FIX`to `0` either via `target_compile_definitions` in their `CMakeLists.txt` or in their `tusb_config.h`.\r\n### New Libraries\r\n\r\n#### pico_async_context\r\n\r\n* Provides support for asynchronous events (timers/IRQ notifications) to be handled in a safe context without concurrent execution (as required by many asynchronous 3rd party libraries).\r\n* Provides implementations matching those previously implemented in `pico_cyw43_arch`:\r\n  * `poll` - Not thread-safe; the user must call `async_context_poll()` periodically from their main loop, but can call `async_context_wait_for_work_until()` to block until work is required.\r\n  * `threadsafe_background` - No polling is required; instead asynchronous work is performed in a low priority IRQ. Locking is provided such that IRQ/non-IRQ or multiple cores can interact safely. \r\n  * `freertos` - Asynchronous work is performed in a separate FreeRTOS task.\r\n* `async_context` guarantees all callbacks happen on a single core.\r\n* `async_context` supports multiple instances for providing independent context which can execute concurrently with respect to each other.\r\n\r\n#### pico_i2c_slave\r\n* A (slightly modified) pico_i2c_slave library from https://github.com/vmilea/pico_i2c_slave\r\n* Adds a callback style event API for handling I2C slave requests.\r\n\r\n#### pico_mbedtls\r\n- Added `pico_mbedtls` library to provide MBed TLS support. You can depend on both `pico_lwip_mbedtls` and `pico_mbedtls` to use MBed TLS and lwIP together. See the [tls_client](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/tls_client.c) example in `pico-examples` for more details.\r\n\r\n#### pico_rand\r\n* Implements a new Random Number Generator API.\r\n* `pico_rand` generates random numbers at runtime utilizing a number of possible entropy sources, and uses those sources to modify the state of a 128-bit 'Pseudo Random Number Generator' implemented in software.\r\n* Adds `get_rand_32()`, `get_rand_64()` and `get_rand_128()` functions to return largely unpredictable random numbers (which should be different on each board/run for example).\r\n\r\n#### Miscellaneous\r\n\r\n* Added a new header `hardware/structs/nvic.h` with a struct for the Arm Cortex M0+ NVIC available via the `nvic_hw` pointer.\r\n* Added new `PICO_CXX_DISABLE_ALLOCATION_OVERRIDES` which can be set to `1` if you do not want `pico_standard_link` to include non-exceptional overrides of `std::new`, `std::new[]`, `std::delete` and `std::delete[]` when exceptions are disabled.\r\n* `elf2uf2` now correctly uses `LMA` instead of `VMA` of the entry point to determine binary type (flash/RAM). This is required to support some exotic binaries correctly. \r\n\r\n### Build\r\n\r\n* The build will now check for a functional compiler via the standard `CMake` mechanism.\r\n* The build will pick up pre-installed `elf2uf2` and `pioasm` if found via an installed `pico-sdk-tools` `CMake` package. If it can do so, then no native compiler is required for the build!\r\n* It is now possible to switch the board type `PICO_BOARD` in an existing `CMake` build directory.\r\n* `ARCHIVE_OUTPUT_DIRECTORY` is now respected in build for `UF2` output files.\r\n* Spaces are now supported in the path to the `pico-sdk`\r\n* All libraries `xxx` in the `pico-sdk` now support a `xxx_headers` variant that just pulls in the libraries'  headers. These `xxx_headers` libraries correctly mirror the dependencies of the `xxx` libraries, so you can use `xxx_headers` instead of `xxx` as your dependency if you do not want to pull in any implementation files (perhaps if you are making a `STATIC` library). Actually the \"all\" is not quite true, non code libraries such as `pico_standard_link` and `pico_cxx_options` are an exception.\r\n \r\n### Bluetooth Support for Pico W (BETA)\r\n\r\nThe support is currently available as a beta. More details will be forthcoming with the actual release.\r\nIn the meantime, there are examples in [pico-examples](https://github.com/raspberrypi/pico-examples#pico-w-bluetooth).\r\n\r\nKey changes:\r\n\r\n* The Bluetooth API is provided by [BTstack](https://github.com/bluekitchen/btstack).\r\n* The following new libraries are provided that expose core BTstack functionality:\r\n  * `pico_btstack_ble` - Adds Bluetooth Low Energy (LE) support.\r\n  * `pico_btstack_classic` - Adds Bluetooth Classic support.\r\n  * `pico_btstack_sbc_encoder` - Adds Bluetooth Sub Band Coding (SBC) encoder support.\r\n  * `pico_btstack_sbc_decoder` - Adds Bluetooth Sub Band Coding (SBC) decoder support.\r\n  * `pico_btstack_bnep_lwip` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP.\r\n  * `pico_btstack_bnep_lwip_sys_freertos` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP with FreeRTOS for `NO_SYS=0`.\r\n* The following integration libraries are also provided:\r\n  * `pico_btstack_run_loop_async_context` - provides a common `async_context` backed implementation of a BTstack *\"run loop\"* that can be used for all BTstack use with the `pico-sdk`.   \r\n  * `pico_btstack_flash_bank` - provides a sample implementation for storing required Bluetooth state in flash.\r\n  * `pico_btstack_cyw43` - integrates BTstack with the CYW43 driver.\r\n* Added `CMake` function `pico_btstack_make_gatt_header` that can be used to run the BTstack `compile_gatt` tool to make a GATT header file from a BTstack `GATT` file.\r\n* Updated `pico_cyw43_driver` and `cyw43_driver` to support HCI communication for Bluetooth.\r\n* Updated `cyw43_driver_picow` to support Pico W specific HCI communication for Bluetooth over SPI.\r\n* Updated `cyw43_arch_init()` and `cyw43_arch_deinit()` to additionally handle Bluetooth support if `CYW43_ENABLE_BLUETOOTH` is `1` (as it will be automatically if you depend on `pico_btstack_cyw43`).\r\n\r\n### Authors\r\n\r\nThanks to the following for their contributions:\r\n\r\nalastairpatrick, \r\nAndrew Burge, \r\nAndrew Scheller, \r\nAttila Wagner, \r\nbruelltuete,\r\nDamien George,\r\nDaniel Treffenstädt, \r\nDavid Greaves, \r\nDipSwitch, \r\nEarle F. Philhower, III, \r\nEngineer_Will, \r\nenvirocoder, \r\nFlaviu Tamas, \r\nGraham Sanderson, \r\nJames Peach, \r\nJan Niehusmann, \r\nJay Greco, \r\nJeremy Grosser, \r\nJonathan Bell, \r\nJonathan Reichelt Gjertsen, \r\nKafCoppelia, \r\nKoji KITAYAMA, \r\nLiam Frasier, \r\nLord-Lucan,\r\nMatthias Ringwald,\r\nMr. Green's Workshop, \r\nNicolas Pouillon, \r\nNikhil Dabas, \r\nPatrick Plenefisch, \r\nPedro Tôrres, \r\nPeter Harper, \r\nPeter Pettersson, \r\nRadoslav Gerganov, \r\nryanjsims, \r\nStargirl Flowers, \r\nThomas Roberts, \r\nTimo Kokkonen\r\n\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/86360118/reactions","total_count":69,"+1":16,"-1":0,"laugh":0,"hooray":33,"confused":0,"heart":17,"rocket":0,"eyes":3}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/70933236","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/70933236/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/70933236/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.4.0","id":70933236,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"RE_kwDOE8B3884EOlr0","tag_name":"1.4.0","target_commitish":"master","name":"SDK version 1.4.0","draft":false,"prerelease":false,"created_at":"2022-06-30T05:46:24Z","published_at":"2022-06-30T06:59:07Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.4.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.4.0","body":"This release adds wireless support for the Raspberry Pi Pico W, adds support for other new boards, and contains various \r\nbug fixes, documentation improvements, and minor improvements/added functionality. You can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.4.0++is%3Amerged).\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `pico_w`\r\n- `datanoisetv_rp2040_dsp`\r\n- `solderparty_rp2040_stamp_round_carrier`\r\n\r\n### Wireless Support\r\n\r\n* Support for the Raspberry Pi Pico W is now included with the SDK (`PICO_BOARD=pico_w`). The Pico W uses a driver \r\n  for the wireless chip called `cyw43_driver` which is included as a submodule of the SDK. You need to initialize \r\n  this submodule for Pico W wireless support to be available. Note that the LED on the Pico W board is only \r\n  accessible via the wireless chip and can be accessed via `cyw43_arch_gpio_put()` and \r\n  `cyw43_arch_gpio_get()` (part of the `pico_cyw43_arch` library described below). As a result of the LED being on \r\n  the wireless chip, there is no `PICO_DEFAULT_LED_PIN` setting and the default LED based examples in [pico-examples](https://github.com/raspberrypi/pico-examples) \r\n  do not work with the Pico W.\r\n* IP support is provided by [lwIP](https://savannah.nongnu.org/projects/lwip/lwIP) which is also included as a \r\n  submodule which you should initialize if you want to use it.\r\n\r\n  The following libraries exposing lwIP functionality are provided by the SDK:\r\n\r\n  * `pico_lwip_core` (included in `pico_lwip`)\r\n  * `pico_lwip_core4` (included in `pico_lwip`)\r\n  * `pico_lwip_core6` (included in `pico_lwip`)\r\n  * `pico_lwip_netif` (included in `pico_lwip`)\r\n  * `pico_lwip_sixlowpan` (included in `pico_lwip`)\r\n  * `pico_lwip_ppp` (included in `pico_lwip`)\r\n  * `pico_lwip_api` (this is a blocking API that may be used with FreeRTOS and is not included in `pico_lwip`)\r\n  \r\n  As referenced above, the SDK provides a `pico_lwip` which aggregates all of the commonly needed lwIP functionality.\r\n  You are of course free to use the substituent libraries explicitly instead.\r\n\r\n  The following libraries are provided that contain the equivalent lwIP application support:\r\n  \r\n  * `pico_lwip_snmp`\r\n  * `pico_lwip_http`\r\n  * `pico_lwip_makefsdata`\r\n  * `pico_lwip_iperf`\r\n  * `pico_lwip_smtp`\r\n  * `pico_lwip_sntp`\r\n  * `pico_lwip_mdns`\r\n  * `pico_lwip_netbios`\r\n  * `pico_lwip_tftp`\r\n  * `pico_lwip_mbedtls`\r\n\r\n* Integration of the IP stack and the `cyw43_driver` network driver into the user's code is handled by \r\n  `pico_cyw43_arch`. Both the IP stack and the driver need to do work in response to network traffic, and \r\n  `pico_cyw43_arch` provides a variety of strategies for servicing that work. Four architecture variants\r\n   are currently provided as libraries:\r\n\r\n  * `pico_cyw43_arch_lwip_poll` - For using the RAW lwIP API (`NO_SYS=1` mode) with polling. With this architecture\r\n    the user code must periodically poll via `cyw43_arch_poll()` to perform background work. This architecture\r\n    matches the common use of lwIP on microcontrollers, and provides no multicore safety\r\n  * `pico_cyw43_arch_lwip_threadsafe_background` - For using the RAW lwIP API (`NO_SYS=1` mode) with multicore \r\n    safety, and automatic servicing of the `cyw43_driver` and\r\n    lwIP in the background. User polling is not required with this architecture, but care should be taken as lwIP \r\n    callbacks happen in an IRQ context.\r\n  * `pico_cyw43_arch_lwip_sys_freertos` - For using the full lwIP API including blocking sockets in OS mode \r\n    (`NO_SYS=0`), along with multicore/task safety, and automatic servicing of the `cyw43_driver` and the lwIP \r\n    stack in a separate task. This powerful architecture works with both SMP and non-SMP variants of the RP2040 port \r\n    of FreeRTOS-Kernel. Note you must set `FREERTOS_KERNEL_PATH` in your build to use this variant.\r\n  * `pico_cyw43_arch_none` - If you do not need the TCP/IP stack but wish to use the on-board LED or other wireless \r\n    chip connected GPIOs.\r\n  \r\n  See the library documentation or the `pico/cyw43_arch.h` header for more details.\r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### hardware_dma\r\n\r\n* Added `dma_unclaim_mask()` function for un-claiming multiple DMA channels at once.\r\n* Added `channel_config_set_high_priority()` function to set the channel priority via a channel config object.\r\n\r\n#### hardware_gpio\r\n\r\n* Improved the documentation for the pre-existing gpio IRQ functions which use the \"one callback per core\" callback \r\n  mechanism, \r\n  and added a `gpio_set_irq_callback()` function to explicitly set the callback independently of enabling per pin GPIO \r\n  IRQs.  \r\n* Reduced the latency of calling the existing \"one callback per core\" GPIO IRQ callback.\r\n* Added new support for the user to add their own shared GPIO IRQ handler independent of the pre-existing\r\n  \"one callback per core\" callback mechanism, allowing for independent usage of GPIO IRQs without having to share one \r\n  handler.\r\n  See \r\n  the \r\n  documentation in `hardware/irq.h` for full details of the functions added:\r\n  * `gpio_add_raw_irq_handler()`\r\n  * `gpio_add_raw_irq_handler_masked()`\r\n  * `gpio_add_raw_irq_handler_with_order_priority()`\r\n  * `gpio_add_raw_irq_handler_with_order_priority_masked()`\r\n  * `gpio_remove_raw_irq_handler()`\r\n  * `gpio_remove_raw_irq_handler_masked()`\r\n  \r\n* Added a `gpio_get_irq_event_mask()` utility function for use by the new \"raw\" IRQ handlers.\r\n\r\n#### hardware_irq\r\n\r\n* Added `user_irq_claim()`, `user_irq_unclaim()`, `user_irq_claim_unused()` and `user_irq_is_claimed()`\r\n  functions for claiming ownership of the *user* IRQs (the ones numbered 26-31 and not connected to any hardware). \r\n  Uses of the *user* IRQs have been updated to use these functions. For `stdio_usb`, the `PICO_STDIO_USB_LOW_PRIORITY_IRQ` define is still respected if specified, but otherwise an unclaimed one is \r\n  chosen. \r\n* Added an `irq_is_shared_handler()` function to determine if a particular IRQ uses a shared handler.\r\n\r\n#### pico_sync\r\n\r\n* Added a `sem_try_acquire()` function, for non blocking acquisition of a semaphore.\r\n\r\n#### pico_stdio\r\n\r\n* `stderr` is now supported and goes to the same destination as `stdout`.\r\n* Zero timeouts for `getchar_timeout_us()` are now correctly honored (previously they were a 1us minimum).\r\n\r\n#### stdio_usb\r\n\r\n* stdio over USB can now be used even if you are linking to `tinyusb_device` yourself. If you have a CDC device in your device descriptors, you can use `pico_enable_stdio_usb(TARGET 1)` in your `CMakeLists.txt`\r\n* The use of a 1ms timer to handle background TinyUSB work has been replaced with use of a more interrupt driven \r\n  approach using a *user* IRQ for better performance. Note this new feature is disabled if shared IRQ handlers\r\n  are disabled via `PICO_DISABLE_SHARED_IRQ_HANDLERS=1`\r\n\r\n#### miscellaneous\r\n\r\n* `get_core_num()` has been moved to `pico/platform.h` from `hardware/sync.h`.\r\n* The C library function `realloc()` is now multicore safe too.\r\n* The minimum PLL frequency has been increased from 400Mhz to 750Mhz to improve stability across operating \r\n  conditions.  This should not affect the majority of users in any way, but may impact those trying to set \r\n  particularly low clock frequencies. If you do wish to return to the previous \r\n  minimum, you can set `PICO_PLL_VCO_MIN_FREQ_MHZ` back to `400`. There is also a new `PICO_PLL_VCO_MAX_FREQ_MHZ` \r\n  which defaults to `1600`.\r\n\r\n### Build\r\n* Compilation with GCC 12 is now supported.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/70933236/reactions","total_count":49,"+1":13,"-1":0,"laugh":2,"hooray":13,"confused":0,"heart":10,"rocket":11,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/67016086","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/67016086/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/67016086/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.3.1","id":67016086,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"RE_kwDOE8B3884D_pWW","tag_name":"1.3.1","target_commitish":"master","name":"SDK version 1.3.1","draft":false,"prerelease":false,"created_at":"2022-05-18T15:41:48Z","published_at":"2022-05-18T20:50:45Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.3.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.3.1","body":"This release contains numerous bug fixes and documentation improvements which are not all listed here; you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.3.1++is%3Amerged).\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `adafruit_kb2040`\r\n- `adafruit_macropad_rp2040`\r\n- `eetree_gamekit_rp2040`\r\n- `garatronic_pybstick26_rp2040` (renamed from `pybstick26_rp2040`) \r\n- `pimoroni_badger2040`\r\n- `pimoroni_motor2040`\r\n- `pimoroni_servo2040`\r\n- `pimoroni_tiny2040_2mb`\r\n- `seeed_xiao_rp2040`\r\n- `solderparty_rp2040_stamp_carrier`\r\n- `solderparty_rp2040_stamp`\r\n- `wiznet_w5100s_evb_pico`\r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### hardware_dma    \r\n\r\n* New documentation has been added to the `dma_channel_abort()` function describing errata RP2040-E13, and how to work around it.\r\n    \r\n#### hardware_irq\r\n* Fixed a bug related to removing and then re-adding shared IRQ handlers. It is now possible to add/remove handlers as documented.\r\n* Added new documentation clarifying the fact the shared IRQ handler ordering \"priorities\" have values that increase with higher priority vs Cortex M0+ IRQ priorites which have values that decrease with priority!\r\n\r\n#### hardware_pwm\r\n* Added a `pwm_config_set_clkdiv_int_frac()` method to complement `pwm_config_set_clkdiv_int()` and `pwm_config_set_clkdiv()`.\r\n\r\n#### hardware_pio\r\n* Fixed the `pio_set_irqn_source_mask_enabled()` method which previously affected the wrong IRQ.\r\n    \r\n#### hardware_rtc\r\n* Added clarification to `rtc_set_datetime()` documentation that the new value may not be visible to a `rtc_get_datetime()` very soon after, due to crossing of clock domains.\r\n\r\n#### pico_platform\r\n* Added a `busy_wait_at_least_cycles()` method as a convenience method for a short tight-loop counter-based delay.\r\n\r\n#### pico_stdio\r\n* Fixed a bug related to removing stdio \"drivers\". `stdio_set_driver_eabled()` can now be used freely to dynamically enable and disable drivers during runtime.\r\n\r\n#### pico_time\r\n* Added an `is_at_the_end_of_time()` method to check if a given time matches the SDK's maximum time value.\r\n\r\n#### Runtime\r\n\r\n* A bug in `__ctzdi2()` aka `__builtin_ctz(uint64_t)` was fixed.\r\n\r\n### Build\r\n* Compilation with GCC 11 is now supported.\r\n* `PIOASM_EXTRA_SOURCE_FILES` is now actually respected.\r\n\r\n### pioasm\r\n* Input files with Windows (CRLF) line endings are now accepted.\r\n* A bug in the python output was fixed.\r\n\r\n### elf2uf2\r\n* Extra padding was added to the UF2 output of misaligned or non-contiguous binaries to work around errata RP2040-E14.\r\n\r\n---\r\n\r\nNote the 1.3.0 release of the SDK incorrectly squashed the history of the changes. A new merge commit has been added to restore the full history, and the [1.3.0](https://github.com/raspberrypi/pico-sdk/tree/1.3.0) tag has been updated ","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/67016086/reactions","total_count":14,"+1":13,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/52471118","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/52471118/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/52471118/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.3.0","id":52471118,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"RE_kwDOE8B3884DIKVO","tag_name":"1.3.0","target_commitish":"master","name":"SDK version 1.3.0","draft":false,"prerelease":false,"created_at":"2022-05-17T18:32:32Z","published_at":"2021-11-01T19:28:19Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.3.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.3.0","body":"This release contains numerous bug fixes and documentation improvements. Additionally, it contains the following notable changes/improvements:\r\n\r\n### Updated TinyUSB to 0.12.0\r\n\r\n- The `lib/tinyusb` submodule has been updated from 0.10.1 to 0.12.0. See https://github.com/hathach/tinyusb/releases/tag/0.11.0 and https://github.com/hathach/tinyusb/releases/tag/0.12.0 for release notes.\r\n- Improvements have been made for projects that include TinyUSB and also compile with enhanced warning levels and `-Werror`. Warnings have been fixed in rp2040 specific TinyUSB code, and in TinyUSB headers, and a new cmake function `suppress_tinyusb_warnings()` has been added, that you may call from your `CMakeLists.txt` to suppress warnings in other TinyUSB C files.\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n  - `adafruit_trinkey_qt2040`\r\n  - `melopero_shake_rp2040`\r\n  - `pimoroni_interstate75`\r\n  - `pimoroni_plasma2040`\r\n  - `pybstick26_rp2040`\r\n  - `waveshare_rp2040_lcd_0.96`\r\n  - `waveshare_rp2040_plus_4mb`\r\n  - `waveshare_rp2040_plus_16mb`\r\n  - `waveshare_rp2040_zero`\r\n\r\n### Updated SVD, `hardware_regs`, `hardware_structs`\r\n\r\nThe [RP2040 SVD](https://github.com/raspberrypi/pico-sdk/blob/master/src/rp2040/hardware_regs/rp2040.svd) has been updated, fixing some register access types and adding new documentation.\r\n\r\nThe `hardware_regs` headers have been updated accordingly.\r\n\r\nThe `hardware_structs` headers which were previously hand coded, are now generated from the SVD, and retain select documentation from the SVD, including register descriptions and register bit-field tables.\r\n\r\ne.g. what was once\r\n\r\n```c\r\ntypedef struct {\r\n    io_rw_32 ctrl;\r\n    io_ro_32 fstat;\r\n    ...\r\n```\r\nbecomes:\r\n\r\n```c\r\n// Reference to datasheet: https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf#tab-registerlist_pio\r\n//\r\n// The _REG_ macro is intended to help make the register navigable in your IDE (for example, using the \"Go to Definition\" feature)\r\n// _REG_(x) will link to the corresponding register in hardware/regs/pio.h.\r\n//\r\n// Bit-field descriptions are of the form:\r\n// BITMASK [BITRANGE]: FIELDNAME (RESETVALUE): DESCRIPTION\r\n\r\ntypedef struct {\r\n    _REG_(PIO_CTRL_OFFSET) // PIO_CTRL\r\n    // PIO control register\r\n    // 0x00000f00 [11:8]  : CLKDIV_RESTART (0): Restart a state machine's clock divider from an initial phase of 0\r\n    // 0x000000f0 [7:4]   : SM_RESTART (0): Write 1 to instantly clear internal SM state which may be otherwise difficult...\r\n    // 0x0000000f [3:0]   : SM_ENABLE (0): Enable/disable each of the four state machines by writing 1/0 to each of these four bits\r\n    io_rw_32 ctrl;\r\n\r\n    _REG_(PIO_FSTAT_OFFSET) // PIO_FSTAT\r\n    // FIFO status register\r\n    // 0x0f000000 [27:24] : TXEMPTY (0xf): State machine TX FIFO is empty\r\n    // 0x000f0000 [19:16] : TXFULL (0): State machine TX FIFO is full\r\n    // 0x00000f00 [11:8]  : RXEMPTY (0xf): State machine RX FIFO is empty\r\n    // 0x0000000f [3:0]   : RXFULL (0): State machine RX FIFO is full\r\n    io_ro_32 fstat;\r\n    ...\r\n```\r\n\r\n### Behavioral Changes\r\n\r\nThere were some behavioral changes in this release:\r\n\r\n#### pico_sync\r\n\r\nSDK 1.2.0 previously added recursive mutex support using the existing (previously non-recursive) `mutex_` functions. This caused a performance regression, and the only clean way to fix the problem was to return the `mutex_` functions to their pre-SDK 1.2.0 behavior, and split the recursive mutex functionality out into separate `recursive_mutex_` functions with a separate `recursive_mutex_` type. \r\n\r\nCode using the SDK 1.2.0 recursive mutex functionality will need to be changed to use the new type and functions, however as a convenience, the pre-processor define `PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY` may be set to 1 to retain the SDK 1.2.0 behavior at the cost of an additional performance penalty. The ability to use this pre-processor define will be removed in a subsequent SDK version.\r\n\r\n#### pico_platform\r\n\r\n* `pico.h` and its dependencies have been slightly refactored so it can be included by assembler code as well as C/C++ code. Thie ensures that assembler code and C/C++ code follow the same board configuration/override order and see the same configuration defines. This should not break any existing code, but is notable enough to mention.\r\n* `pico/platform.h` is now fully documented.\r\n\r\n#### pico_standard_link\r\n\r\n`-Wl,max-page-size=4096` is now passed to the linker, which is beneficial to certain users and should have no discernible impact on the rest.\r\n\r\n### Other Notable Improvements\r\n\r\n#### hardware_base\r\n\r\n* Added `xip_noalloc_alias(addr)`, `xip_nocache_alias(addr)`, `xip_nocache_noalloc_alias(addr)` macros for converting a flash address between XIP aliases (similar to the `hw_xxx_alias(addr)` macros).\r\n\r\n#### hardware_dma\r\n\r\n* Added `dma_timer_claim()`, `dma_timer_unclaim()`, `dma_claim_unused_timer()` and `dma_timer_is_claimed()` to manage ownership of DMA timers.\r\n* Added `dma_timer_set_fraction()` and `dma_get_timer_dreq()` to facilitate pacing DMA transfers using DMA timers.\r\n\r\n#### hardware_i2c\r\n\r\n* Added `i2c_get_dreq()` function to facilitate configuring DMA transfers to/from an I2C instance.\r\n\r\n#### hardware_irq\r\n\r\n* Added `irq_get_priority()`.\r\n* Fixed implementation when `PICO_DISABLE_SHARED_IRQ_HANDLERS=1` is specified, and allowed  `irq_add_shared_handler` to be used in this case (as long as there is only one handler - i.e. it behaves exactly like `irq_set_exclusive_handler`),\r\n* Sped up IRQ priority initialization which was slowing down per core initialization.\r\n\r\n#### hardware_pio\r\n \r\n* `pio_encode_` functions in `hardware/pico_instructions.h` are now documented. \r\n\r\n#### hardware_pwm\r\n\r\n* Added `pwm_get_dreq()` function to facilitate configuring DMA transfers to a PWM slice.\r\n\r\n#### hardware_spi\r\n\r\n* Added `spi_get_dreq()` function to facilitate configuring DMA transfers to/from an SPI instance.\r\n\r\n#### hardware_uart\r\n\r\n* Added `uart_get_dreq()` function to facilitate configuring DMA transfers to/from a UART instance.\r\n\r\n#### hardware_watchdog\r\n\r\n* Added `watchdog_enable_caused_reboot()` to distinguish a watchdog reboot caused by a watchdog timeout after calling `watchdog_enable()` from other watchdog reboots (e.g. that are performed when a UF2 is dragged onto a device in BOOTSEL mode). \r\n\r\n#### pico_bootrom\r\n\r\n* Added new constants and function signature typedefs to `pico/bootrom.h` to facilitate calling bootrom functions directly.\r\n\r\n#### pico_multicore\r\n\r\n* Improved documentation in `pico/multicore.h`; particularly, `multicore_lockout_` functions are newly documented.\r\n\r\n#### pico_platform\r\n\r\n* `PICO_RP2040` is now defined to 1 in `PICO_PLATFORM=rp2040` (i.e. normal) builds.\r\n\r\n#### pico_stdio\r\n* Added `puts_raw()` and `putchar_raw()` to skip CR/LF translation if enabled.\r\n* Added `stdio_usb_connected()` to detect CDC connection when using `stdio_usb`.\r\n* Added `PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS` define that can be set to wait for a CDC connection to be established during initialization of `stdio_usb`. Note: value -1 means indefinite. This can be used to prevent initial program output being lost, at the cost of requiring an active CDC connection.\r\n* Fixed `semihosting_putc` which was completely broken.\r\n\r\n#### pico_usb_reset_interface\r\n\r\n* This new library contains `pico/usb_reset_interface.h` split out from `stdio_usb` to facilitate inclusion in external projects.\r\n\r\n### CMake build\r\n\r\n* `OUTPUT_NAME` target property is now respected when generating supplemental files (`.BIN`, `.HEX`, `.MAP`, `.UF2`)\r\n\r\n### pioasm\r\n\r\n* Operator precedence of `*`, `/`, `-`, `+` have been fixed\r\n* Incorrect MicroPython output has been fixed. \r\n\r\n### elf2uf2\r\n\r\n* A bug causing an error with binaries produces by certain other languages has been fixed.\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/52471118/reactions","total_count":13,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":6,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/44053585","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/44053585/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/44053585/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.2.0","id":44053585,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"MDc6UmVsZWFzZTQ0MDUzNTg1","tag_name":"1.2.0","target_commitish":"master","name":"SDK version 1.2.0","draft":false,"prerelease":false,"created_at":"2021-06-03T15:46:02Z","published_at":"2021-06-03T15:54:17Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.2.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.2.0","body":"This release contains numerous bug fixes and documentation improvements. Additionally it contains the following improvements/notable changes:\r\n\r\n### Updated TinyUSB to 0.10.1\r\nThe `lib/tinyusb` submodule has been updated from 0.8.0 and now tracks upstream https://github.com/hathach/tinyusb.git. It is worth making sure you do a\r\n\r\n```\r\ngit submodule sync\r\ngit submodule update\r\n```\r\n\r\nto make sure you are correctly tracking upstream TinyUSB if you are not checking out a clean pico-sdk repository.\r\n\r\nNote also that moving ffrom TinyUSB 0.8.0 to TinyUSB 0.10.1 may require some minor changes to your USB code.\r\n\r\n### New/improved board headers\r\n* New board headers support for PICO_BOARDs `arduino_nano_rp240_connect`, `pimoroni_picolipo_4mb` and `pimoroni_picolipo_16mb`\r\n* Missing/new `#defines` for default SPI and I2C pins have been added\r\n\r\n### Added CMSIS core headers\r\nCMSIS core headers (e.g. `core_cm0plus.h` and `RP2040.h`) are made available via `cmsis_core` INTERFACE library. Additionally, CMSIS standard exception naming is available via `PICO_CMSIS_RENAME_EXCEPTIONS=1`\r\n\r\n### API improvements\r\n\r\n#### pico_sync\r\n* Added support for recursive mutexes via `recursive_mutex_init()` and `auto_init_recursive_mutex()`\r\n* Added `mutex_enter_timeout_us()`\r\n* Added `critical_section_deinit()` \r\n* Added `sem_acquire_timeout_ms()` and `sem_acquire_block_until()`\r\n\r\n#### hardware_adc\r\n* Added `adc_get_selected_input()`\r\n\r\n#### hardware_clocks\r\n* `clock_get_hz()` now returns actual achieved frequency rather than desired frequency\r\n\r\n#### hardware_dma\r\n* Added `dma_channel_is_claimed()`\r\n* Added new methods for configuring/acknowledging DMA IRQs. `dma_irqn_set_channel_enabled()`, `dma_irqn_set_channel_mask_enabled()`, `dma_irqn_get_channel_status()`, `dma_irqn_acknowledge_channel()` etc.\r\n\r\n#### hardware_exception\r\n\r\nNew library for setting ARM exception handlers:\r\n\r\n* Added `exception_set_exclusive_handler()`, `exception_restore_handler()`, `exception_get_vtable_handler()`\r\n\r\n#### hardware_flash\r\n\r\n* Exposed previously private function `flash_do_cmd()` for low level flash command execution\r\n\r\n#### hardware_gpio\r\n\r\n* Added `gpio_set_input_hysteresis_enabled()`, `gpio_is_input_hysteresis_enabled()`, `gpio_set_slew_rate()`, `gpio_get_slew_rate()`, `gpio_set_drive_strength()`, `gpio_get_drive_strength()`. `gpio_get_out_level()`, `gpio_set_irqover()`\r\n\r\n#### hardware_i2c\r\n\r\n* Corrected a number of incorrect hardware register definitions\r\n* A number of edge case in the i2c code fixed\r\n\r\n#### hardware_interp\r\n* Added `interp_lane_is_claimed()`, `interp_unclaim_lane_mask()`\r\n\r\n#### hardware_irq\r\n* Notably fixed the `PICO_LOWEST/HIGHEST_IRQ_PRIORITY` values which were backwards!\r\n\r\n#### hardware_pio\r\n\r\n* Added new methods for configuring/acknowledging PIO interrupts (`pio_set_irqn_source_enabled()`,\r\n  `pio_set_irqn_source_mask_enabled()`, `pio_interrupt_get()`, `pio_interrupt_clear()` etc.)\r\n* Added `pio_sm_is_claimed()`\r\n\r\n#### hardware_spi\r\n* Added `spi_get_baudrate()`\r\n* Changed `spi_init()` to return the set/achieved baud rate rather than void\r\n* Changed `spi_is_writable()` to return bool not size_t (it was always 1/0)\r\n  \r\n#### hardware_sync\r\n* Notable documentation improvements for spin lock functions\r\n* Added `spin_lock_is_claimed()`\r\n\r\n#### hardware_timer\r\n* Added `busy_wait_ms()` to match `busy_wait_us()`\r\n* Added `hardware_alarm_is_claimed()`\r\n\r\n#### pico_float/pico_double\r\n\r\n* Correctly save/restore divider state if floating point is used from interrupts\r\n\r\n#### pico_int64_ops\r\n\r\n* Added `PICO_INT64_OPS_IN_RAM` flag to move code into RAM to avoid veneers when calling code is in RAM\r\n\r\n#### pico_runtime\r\n\r\n* Added ability to override panic function by setting `PICO_PANIC_FUNCTION=foo` to the use `foo` as the implementation, or setting \r\n`PICO_PANIC_FUNCITON=` to simply breakpoint, saving some code space\r\n\r\n#### pico_unique_id\r\n\r\n* Added `pico_get_unique_board_id_string()`.\r\n\r\n### General code improvements\r\n* Cleanup up some additional classes of compiler warnings\r\n* Adding some missing `const` to method parameters\r\n\r\n### SVD  \r\n* USB DPRAM for device mode is now included\r\n\r\n### pioasm\r\n* Added `#pragma once` to C/C++ output\r\n\r\n### RTOS interoperability\r\n\r\nImprovements designed to make porting RTOSes either based on the SDK or supporting SDK code easier.\r\n\r\n* Added `PICO_DIVIDER_DISABLE_INTERRUPTS` flag to optionally configure all uses of the hardware divider to be guarded by disabling interrupts, rather than requiring on the RTOS to save/restore the divider state on context switch\r\n* Added new abstractions to `pico/lock_core.h` to allow an RTOS to inject replacement code for SDK based\r\nlow level wait, notify and sleep/timeouts used by synchonization primitives in `pico_sync` and for `sleep_` methods. If an RTOS implements these few simple methods, then all SDK semaphore, mutex, queue, sleep methods can be safely used both within/to/from RTOS tasks, but also to communicate with non RTOS task aware code, whether it be existing libraries and IRQ handlers or code running perhaps (though not necessarily) on the other core\r\n\r\n### CMake build changes\r\n\r\nSubstantive changes have been made to the CMake build, so if you are using a hand crafted non-CMake build, you **will** need to update your compile/link flags. Additionally changed some possibly confusing status messages from CMake build generation to be debug only\r\n\r\n### Boot Stage 2\r\n* New boot stage 2 for `AT25SF128A`\r\n\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/44053585/reactions","total_count":8,"+1":3,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":0,"rocket":0,"eyes":1}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/41058769","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/41058769/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/41058769/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.1.2","id":41058769,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"MDc6UmVsZWFzZTQxMDU4NzY5","tag_name":"1.1.2","target_commitish":"master","name":"1.1.2 bug fix release","draft":false,"prerelease":false,"created_at":"2021-04-07T13:17:18Z","published_at":"2021-04-07T13:21:46Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.1.2","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.1.2","body":"Fixes issues with boot stage 2 selection"},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/40850757","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/40850757/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/40850757/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.1.1","id":40850757,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"MDc6UmVsZWFzZTQwODUwNzU3","tag_name":"1.1.1","target_commitish":"master","name":"1.1.1 bug fix release","draft":false,"prerelease":false,"created_at":"2021-04-01T22:25:45Z","published_at":"2021-04-01T22:34:16Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.1.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.1.1","body":"This fixes a number of bugs, and additionally adds support for a board configuration header to choose the boot_stage2"},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/39345261","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/39345261/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/39345261/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.1.0","id":39345261,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"MDc6UmVsZWFzZTM5MzQ1MjYx","tag_name":"1.1.0","target_commitish":"master","name":"SDK version 1.1.0","draft":false,"prerelease":false,"created_at":"2021-03-05T15:11:54Z","published_at":"2021-03-05T15:16:09Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.1.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.1.0","body":"New Feature Highlights\r\n\r\n* Added board headers for Adafruit, Pimoroni & SparkFun boards\r\n    - new values for PICO_BOARD are `adafruit_feather_rp2040`, `adafruit_itsybitsy_rp2040`, `adafruit_qtpy_rp2040`,\r\n      `pimoroni_keybow2040`, `pimoroni_picosystem`, `pimoroni_tiny2040`, `sparkfun_micromod`,\r\n       `sparkfun_promicro`, `sparkfun_thingplus`, in addition to the existing `pico` and `vgaboard`.\r\n    - Added additional definitions for a default SPI, I2C pins as well as the existing ones for UART\r\n    - Allow _default_ pins to be undefined (not all boards have UART for example), and SDK will compile but warn as needed in the absence of default.\r\n    - Added additional definition for a default WS2812 compatible pin (currently unused).\r\n\r\n* New reset options\r\n    - Added `pico_bootsel_via_double_reset` library to allow reset to _BOOTSEL_ mode via double press of a RESET button\r\n    - When using `pico_stdio_usb` i.e. stdio connected via USB CDC to host, setting baud rate to 1200 (by default)\r\n      can optionally be used to reset into _BOOTSEL_ mode.\r\n    - When using `pico-stdio_usb` i.e. stdio connected via USB CDC to host, an additional interface may be added\r\n      to give _picotool_ control over resetting the device.\r\n\r\n* Build improvement for non SDK or existing library builds\r\n    - Removed additional compiler warnings (note register headers now use _u(x) macro for unsigned values though).\r\n    - Made build more clang friendly.\r\n\r\nThis release also contains many bug fixes, documentation updates and minor improvements.\r\n\r\nNote: there are some nominally backwards incompatible changes not worthy of a major version bump:\r\n    - `PICO_DEFAULT_UART_` defines now default to undefined if there is no default rather than -1 previously\r\n    - The broken `multicore_sleep_core1()` API has been removed; `multicore_reset_core1`\r\n      is already available to put core 1 into a deep sleep.\r\n"},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/37201021","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/37201021/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/37201021/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.0.1","id":37201021,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","site_admin":false},"node_id":"MDc6UmVsZWFzZTM3MjAxMDIx","tag_name":"1.0.1","target_commitish":"master","name":"SDK version 1.0.1","draft":false,"prerelease":false,"created_at":"2021-02-01T20:46:45Z","published_at":"2021-02-01T21:07:28Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.0.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.0.1","body":"- add `pico_get_unique_id` method to return a unique identifier for a Pico board using the identifier of the external flash\r\n- exposed all 4 pacing timers on the DMA peripheral (previously only 2 were exposed)\r\n- fixed ninja build (i.e. `cmake -G ninja .. ; ninja`)\r\n- minor other improvements and bug fixes\r\n\r\nAdditionally, a low level change was made to the way flash binaries start executing after `boot_stage2`. This was at the request of folks implementing other language runtimes. It is not generally of concern to end users, however it did require a change to the linker scripts so if you have cloned those to make modifications then you need to port across the relevant changes. If you are porting a different language runtime using the SDK boot_stage2 implementations then you should be aware that you should now have a vector table (rather than executable code) - at `0x10000100`\r\n\r\n"}]